@using selfies.Models

@if (User.Identity.IsAuthenticated)
{

    <text>


    <!-- ko if: threads().length == 0 -->
    <ul>
        <li>no threads yet, <a href="@Url.Content("~/send")">send one</a></li>
    </ul>
    <!-- /ko -->

    <!-- ko if: threads().length > 0 -->
        <ul class="inbox" data-bind="foreach: threads">
            <li data-bind="attr: { id: 'li-' + groupKey }">

                <div class="inboxImage">
                    <img data-bind="attr: { src: '@Url.Content("~/api/snap/thumb/")' + groupKey }" />
                </div>

                <div class="inboxText">
                    <a data-bind="attr: { href: '@Url.Content("~/threads/")' + groupKey }">
                        from <span data-bind="text: fromHandle.name"></span>, to <span data-bind="text: toHandle.name"></span><br />
                    </a>
                    <div data-bind="timeago: startDate"></div>
                </div>

            </li>
        </ul>
    <!-- /ko -->

    <!-- pager -->

    <div id="pager">

        <div id="backButton" data-bind="visible: currentPage() > 1">
            <a href="#" data-bind="click: goBack">back</a>
        </div>
        <div id="nextButton">
            <a href="#" data-bind="click: goNext">next</a>
        </div>

    </div>
    



@*            @if (ViewBag.threads.Count > 0)
            {
                foreach (thread thready in ViewBag.threads)
                {
                    
                <text>
                    <li id="li-@thready.groupKey">
                            <div class="inboxImage">
                                @if(thready.authorizeRequest.Equals(1)) {
                                    <img src="@Url.Content("~/Images/lock.png")" />
                                } else {
                                    <img src="@Url.Content("~/api/snap/thumb/" + thready.groupKey)" />                                    
                                }
                            </div>

                            <div class="inboxText">
                                <a href="@Url.Content("~/threads/" + thready.groupKey)"> from: @thready.fromHandle.name, to @thready.toHandle.name</a> <br />
                                <abbr class="timeago" title="@thready.startDate.Value.ToString("s")Z"></abbr>
                            </div>

                            <div class="inboxControls">

                                @if (ViewBag.handle != null && (thready.fromHandle.publicKey == ViewBag.handle.publicKey || thready.toHandle.publicKey == ViewBag.handle.publicKey))
                                {
                                    <a id="@thready.groupKey" class="remover" href="#">Remove</a>            
                                }

                            </div>

                    </li>
                </text>
                }
            }*@

    </text>
            
}
else
{
 
    <text>

    <div id="welcome">

        <p>hey.
            </p>

        <p>authie is a photosharing app based on permissions.
        </p>

        <p>we're a 'dark' social network, meaning we purposely do not connect with other
            social networks. we're all about privacy and easy sharing with people you want
            to share with.
            </p>

        <p>
            on authie, you can:
        </p>
        <ul>
            <li>send snaps directly to people</li>
            <li>develop your 'dark profile', a photostream that only your friends can see </li>
            <li>read and participate in the daily, a photo stream of responses to a daily prompt</li>            
        </ul>

        <p>just <a href="https://itunes.apple.com/us/app/authie/id796548932?mt=8">download</a> us on the appstore...</p>


    </div>

    </text>   
}

@section Scripts {
<script type="text/javascript">
    $(document).ready(function () {
        $("a.remover").click(function () {
            var currentId = $(this).attr('id');
            $("#li-" + currentId).fadeOut();

            $.ajax({
                url: "@Url.Content("~/api/thread")",
                data: { '': currentId },
                type: 'DELETE',
                success: function (result) {
                    // Do something with the result
                }
            });

        });
    });
</script>
<script type="text/javascript">

    function InboxViewModel() {
        var self = this;

        ko.bindingHandlers.timeago = {
            init: function(element, valueAccessor, allBindingsAccessor) {
                // First get the latest data that we're bound to
                var value = valueAccessor(), allBindings = allBindingsAccessor();

                // Next, whether or not the supplied model property is observable,
                // get its current value
                var valueUnwrapped = ko.utils.unwrapObservable(value);

                // set the title attribute to the value passed
                $(element).attr('title', valueUnwrapped);

                // apply timeago to change the text of the element
                $(element).timeago();
            }
        };

        self.threads = ko.observableArray([]);
        self.currentPage = ko.observable(1);

        self.goBack = function() {
            var page = self.currentPage() - 1;
            self.currentPage(page);
            self.loadThreads();
        }

        self.goNext = function() {
            var page = self.currentPage() + 1;
            self.currentPage(page);
            self.loadThreads();
        }

        self.loadThreads = function () {

            self.threads.removeAll();

            $.get("@Url.Content("~/api/thread/")" + self.currentPage(), function (data, status) {

                if (data.length > 0) {
                    $.each(data, function (i, item) {
                        item.startDate = item.startDate + "Z";
                        self.threads.push(item);
                    });
                }

            });


        }

        // initial load on init...
        self.loadThreads();


        }

        ko.bindingHandlers.timeago = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = valueAccessor();
                var valueUnwrapped = ko.unwrap(value);
                element.title = moment(valueUnwrapped).toISOString();
                $(element).timeago();
            },
            update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var value = valueAccessor();
                var valueUnwrapped = ko.unwrap(value);
                element.title = moment(valueUnwrapped).toISOString();
                $(element).timeago('update', element.title);
            }
        }

        ko.applyBindings(new InboxViewModel());
</script>
}